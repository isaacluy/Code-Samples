package  {	import flash.display.LoaderInfo;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.events.*;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import fl.text.TLFTextField;	public class MasksTrainer extends MovieClip {				private var times:Array = ["15000","30000","60000","120000"]; // 15sec, 30sec, 1min, 2min		//private var times:Array = ["3000","3000","3000","3000"]; // test array		private var voice:String = "sue";		//private var voice:String = "isaac";		private var counter:uint = 1;		private var numberOfMasks:uint = 12; // each full mask is 2 numbers, so 12 = all 6 masks 		private var goJoeyAuguste:uint = 10000; //number of masks before calling Joey or Auguste		private var timeCounter:Number = 0;		private var inOrder:Boolean = true;		private var soundOn:Boolean = true;				private var currentMask:uint;		private var currentTime:uint;		private var timer:Timer;		private var sound:Sound;				public function MasksTrainer() {			trace("MasksTrainer");						if (stage) loadParams();            else addEventListener(Event.ADDED_TO_STAGE, loadParams);		}				private function loadParams(e:Event = null) {			trace("loadParams");						removeEventListener(Event.ADDED_TO_STAGE, loadParams);			stage.scaleMode = StageScaleMode.NO_SCALE;//define how stage scales			stage.align = StageAlign.TOP_LEFT;            if (loaderInfo.parameters.masks) {                //var tf:TextField = new TextField();                //tf.autoSize = TextFieldAutoSize.LEFT;                //tf.text = loaderInfo.parameters.masks;                //addChild(tf);								numberOfMasks = uint(loaderInfo.parameters.masks);            }						if (loaderInfo.parameters.sound) {                //var tf:TextField = new TextField();                //tf.autoSize = TextFieldAutoSize.LEFT;                //tf.text = loaderInfo.parameters.sound;                //addChild(tf);								var aux = uint(loaderInfo.parameters.sound);				if(aux < 1) soundOn = false;            }						if (loaderInfo.parameters.order) {                //var tf:TextField = new TextField();                //tf.autoSize = TextFieldAutoSize.LEFT;                //tf.text = loaderInfo.parameters.order;                //addChild(tf);								var aux2 = uint(loaderInfo.parameters.order);				if(aux2 < 1) inOrder = false;            }						if (loaderInfo.parameters.janda) {                //var tf:TextField = new TextField();                //tf.autoSize = TextFieldAutoSize.LEFT;                //tf.text = loaderInfo.parameters.janda;                //addChild(tf);								var aux3 = uint(loaderInfo.parameters.janda);				if(aux3 >= 1) goJoeyAuguste = numberOfMasks;            }						nextFrame();			init();		}				private function init() {			trace("init");						stopBtn.gotoAndStop(1);			stopBtn.buttonMode = true;			stopBtn.addEventListener(MouseEvent.CLICK, stopHandler);						(soundOn) ? soundCtl.gotoAndStop(2) : soundCtl.gotoAndStop(1);			soundCtl.buttonMode = true;			soundCtl.addEventListener(MouseEvent.CLICK, soundHandler);						(inOrder) ? randomCtl.gotoAndStop(1) : randomCtl.gotoAndStop(2);			randomCtl.buttonMode = true;			randomCtl.addEventListener(MouseEvent.CLICK, randomHandler);						timeDisplay.visible = false;						currentMask = (inOrder) ? counter : Math.ceil(Math.random() * numberOfMasks);			currentTime = Math.floor(Math.random() * times.length);						if(inOrder && goJoeyAuguste < 50) goJoeyAuguste = numberOfMasks;						setMask();		}				private function setMask():void {						mTrainer.gotoAndStop(currentMask);						trace("\n\n************");			trace(currentMask);			trace(times[currentTime]);			trace("************");						if(soundOn){				sound = new Sound(new URLRequest(voice+"/"+currentMask+".mp3"));				sound.play();			}						timer = new Timer(times[currentTime], 1);			timer.addEventListener(TimerEvent.TIMER, generateNumber);			timer.start();						counter++;		}				private function generateNumber(te:TimerEvent = null):void {			//trace("generateNumber");			timeCounter += Number(times[currentTime]);						var nextMask:uint;			trace("Counter: "+counter);			if(counter <= goJoeyAuguste) {				if(counter > numberOfMasks) {counter = 1;}				nextMask = (inOrder) ? counter : Math.ceil(Math.random() * numberOfMasks);			} else {				trace("J&A");				counter = (inOrder) ? 0 : Math.round((Math.random() * 4) + 1);				nextMask = Math.round(Math.random() + 13);			}			if(nextMask != currentMask){				currentMask = nextMask;			} else {				currentMask += 1;				if(currentMask > numberOfMasks) {					currentMask = 1;				}			}			currentTime = Math.floor(Math.random() * times.length);			setMask();		}				private function stopHandler(me:MouseEvent = null):void {						//trace("stopHandler");			if(stopBtn.currentFrame <= 1) {				if(timer != null) {					timer.removeEventListener(TimerEvent.TIMER, generateNumber);					timer.stop();				}				stopBtn.gotoAndStop(2);				timeDisplay.visible = true;				timeDisplay.timeBoard.text = getSeconds() + " MINUTES";			} else {				stopBtn.gotoAndStop(1);				timeDisplay.visible = false;				generateNumber();			}		}				private function soundHandler(me:MouseEvent = null):void {						//trace("soundHandler");			if(soundCtl.currentFrame <= 1) {				soundCtl.gotoAndStop(2);			} else {				soundCtl.gotoAndStop(1);			}			soundOn = !soundOn;		}				private function randomHandler(me:MouseEvent = null):void {						//trace("randomHandler");			if(randomCtl.currentFrame <= 1) {				randomCtl.gotoAndStop(2);			} else {				randomCtl.gotoAndStop(1);			}			inOrder = !inOrder;		}				private function getSeconds():String{			var time:Number = timeCounter / 60000;			return time.toString();		}	}	}